diff --git a/node_modules/gatsby/cache-dir/static-entry.js b/node_modules/gatsby/cache-dir/static-entry.js
index aa3b9cf..98c271e 100644
--- a/node_modules/gatsby/cache-dir/static-entry.js
+++ b/node_modules/gatsby/cache-dir/static-entry.js
@@ -14,13 +14,9 @@ const { version: gatsbyVersion } = require(`gatsby/package.json`)
 const pagesObjectMap = new Map()
 pages.forEach(p => pagesObjectMap.set(p.path, p))
 
-const stats = JSON.parse(
-  fs.readFileSync(`${process.cwd()}/public/webpack.stats.json`, `utf-8`)
-)
+const stats = require(`gatsby-public-dir/webpack.stats.json`)
 
-const chunkMapping = JSON.parse(
-  fs.readFileSync(`${process.cwd()}/public/chunk-map.json`, `utf-8`)
-)
+const chunkMapping = require(`gatsby-public-dir/chunk-map.json`)
 
 // const testRequireError = require("./test-require-error")
 // For some extremely mysterious reason, webpack adds the above module *after*
@@ -126,13 +122,11 @@ export default (pagePath, callback) => {
 
   let dataAndContext = {}
   if (page.jsonName in dataPaths) {
-    const pathToJsonData = join(
-      process.cwd(),
-      `/public/static/d`,
-      `${dataPaths[page.jsonName]}.json`
-    )
+    const pathToJsonData = `gatsby-public-dir/static/d/${
+      dataPaths[page.jsonName]
+    }.json`
     try {
-      dataAndContext = JSON.parse(fs.readFileSync(pathToJsonData))
+      dataAndContext = JSON.parse(fs.readFileSync(require.resolve(`gatsby-public-dir/static/d/${dataPaths[page.jsonName]}.json`)))
     } catch (e) {
       console.log(`error`, pathToJsonData, e)
       process.exit()
@@ -324,7 +318,7 @@ export default (pagePath, callback) => {
             data-href={`${__PATH_PREFIX__}/${style.name}`}
             dangerouslySetInnerHTML={{
               __html: fs.readFileSync(
-                join(process.cwd(), `public`, style.name),
+                join(__PUBLIC_PATH__, style.name),
                 `utf-8`
               ),
             }}
diff --git a/node_modules/gatsby/dist/commands/build-html.js b/node_modules/gatsby/dist/commands/build-html.js
index 6ae293a..ed98191 100644
--- a/node_modules/gatsby/dist/commands/build-html.js
+++ b/node_modules/gatsby/dist/commands/build-html.js
@@ -43,7 +43,7 @@ function () {
           return reject(e);
         }
 
-        const outputFile = `${directory}/public/render-page.js`;
+        const outputFile = `${process.env.GATSBY_BUILD_DIR || `${directory}/public`}/render-page.js`;
 
         if (stats.hasErrors()) {
           let webpackErrors = stats.toJson().errors.filter(Boolean);
diff --git a/node_modules/gatsby/dist/commands/develop-html.js b/node_modules/gatsby/dist/commands/develop-html.js
index 7acd08d..ff3996f 100644
--- a/node_modules/gatsby/dist/commands/develop-html.js
+++ b/node_modules/gatsby/dist/commands/develop-html.js
@@ -31,7 +31,7 @@ function () {
           return reject(e);
         }
 
-        const outputFile = `${directory}/public/render-page.js`;
+        const outputFile = `${process.env.GATSBY_BUILD_DIR || `${directory}/public`}/render-page.js`
 
         if (stats.hasErrors()) {
           let webpackErrors = stats.toJson().errors;
diff --git a/node_modules/gatsby/dist/internal-plugins/dev-404-page/gatsby-node.js b/node_modules/gatsby/dist/internal-plugins/dev-404-page/gatsby-node.js
index 7e795fd..ee0dd75 100644
--- a/node_modules/gatsby/dist/internal-plugins/dev-404-page/gatsby-node.js
+++ b/node_modules/gatsby/dist/internal-plugins/dev-404-page/gatsby-node.js
@@ -23,7 +23,7 @@ function () {
 
       const createPage = actions.createPage;
       const source = path.join(__dirname, `./raw_dev-404-page.js`);
-      const destination = path.join(program.directory, `.cache`, `dev-404-page.js`);
+      const destination = path.join(process.env.GATSBY_CACHE_DIR || path.join(program.directory, `.cache`), `dev-404-page.js`);
 
       const copy = () => fs.copy(source, destination);
 
diff --git a/node_modules/gatsby/dist/internal-plugins/query-runner/pages-writer.js b/node_modules/gatsby/dist/internal-plugins/query-runner/pages-writer.js
index 95d724d..6da0d89 100644
--- a/node_modules/gatsby/dist/internal-plugins/query-runner/pages-writer.js
+++ b/node_modules/gatsby/dist/internal-plugins/query-runner/pages-writer.js
@@ -93,7 +93,7 @@ const preferDefault = m => m && m.default || m
     asyncRequires += `exports.data = () => import(/* webpackChunkName: "pages-manifest" */ "${(0, _path.joinPath)(program.directory, `.cache`, `data.json`)}")\n\n`;
 
     const writeAndMove = (file, data) => {
-      const destination = (0, _path.joinPath)(program.directory, `.cache`, file);
+      const destination = (0, _path.joinPath)(process.env.GATSBY_CACHE_DIR || (0, _path.joinPath)(program.directory, `.cache`), file);
       const tmp = `${destination}.${Date.now()}`;
       return fs.writeFile(tmp, data).then(() => fs.move(tmp, destination, {
         overwrite: true
diff --git a/node_modules/gatsby/dist/utils/babel-loader-helpers.js b/node_modules/gatsby/dist/utils/babel-loader-helpers.js
index 4d3ac6c..0a9a435 100644
--- a/node_modules/gatsby/dist/utils/babel-loader-helpers.js
+++ b/node_modules/gatsby/dist/utils/babel-loader-helpers.js
@@ -15,7 +15,7 @@ const loadCachedConfig = () => {
   };
 
   if (process.env.NODE_ENV !== `test`) {
-    pluginBabelConfig = require(path.join(process.cwd(), `./.cache/babelState.json`));
+    pluginBabelConfig = require(path.join(process.env.GATSBY_CACHE_DIR || path.join(process.cwd(), `./.cache`), `babelState.json`));
   }
 
   return pluginBabelConfig;
diff --git a/node_modules/gatsby/dist/utils/html-renderer-queue.js b/node_modules/gatsby/dist/utils/html-renderer-queue.js
index a9dfb2a..3a42dc9 100644
--- a/node_modules/gatsby/dist/utils/html-renderer-queue.js
+++ b/node_modules/gatsby/dist/utils/html-renderer-queue.js
@@ -24,7 +24,10 @@ module.exports = (htmlComponentRendererPath, pages, activity) => new Promise((re
   const envVars = Object.entries({
     NODE_ENV: process.env.NODE_ENV,
     gatsby_executing_command: process.env.gatsby_executing_command,
-    gatsby_log_level: process.env.gatsby_log_level
+    gatsby_log_level: process.env.gatsby_log_level,
+    NODE_PATH: process.env.NODE_PATH,
+    GATSBY_BUILD_DIR: process.env.GATSBY_BUILD_DIR,
+    GATSBY_CACHE_DIR: process.env.GATSBY_CACHE_DIR
   });
   const start = process.hrtime();
   const segments = chunk(pages, 50);
diff --git a/node_modules/gatsby/dist/utils/webpack.config.js b/node_modules/gatsby/dist/utils/webpack.config.js
index d94fbe1..3cab803 100644
--- a/node_modules/gatsby/dist/utils/webpack.config.js
+++ b/node_modules/gatsby/dist/utils/webpack.config.js
@@ -193,7 +193,8 @@ function () {
       let configPlugins = [plugins.moment(), // Add a few global variables. Set NODE_ENV to production (enables
       // optimizations for React) and what the link prefix is (__PATH_PREFIX__).
       plugins.define(Object.assign({}, processEnv(stage, `development`), {
-        __PATH_PREFIX__: JSON.stringify(program.prefixPaths ? store.getState().config.pathPrefix : ``)
+        __PATH_PREFIX__: JSON.stringify(program.prefixPaths ? store.getState().config.pathPrefix : ``),
+        __PUBLIC_PATH__: JSON.stringify(process.env.GATSBY_BUILD_DIR || directoryPath(`public`)),
       }))];
 
       switch (stage) {
@@ -319,12 +320,13 @@ function () {
           "@babel/runtime": path.dirname(require.resolve(`@babel/runtime/package.json`)),
           "core-js": path.dirname(require.resolve(`core-js/package.json`)),
           "react-hot-loader": path.dirname(require.resolve(`react-hot-loader/package.json`)),
-          "react-lifecycles-compat": directoryPath(`.cache/react-lifecycles-compat.js`),
-          "create-react-context": directoryPath(`.cache/create-react-context.js`)
+          "react-lifecycles-compat": (process.env.GATSBY_CACHE_DIR || directoryPath(`.cache`)) + `/react-lifecycles-compat.js`,
+          "create-react-context": (process.env.GATSBY_CACHE_DIR || directoryPath(`.cache`)) + `/create-react-context.js`,
+          "gatsby-public-dir": process.env.GATSBY_BUILD_DIR || directoryPath(`public`)
         },
         plugins: [// Those two folders are special and contain gatsby-generated files
         // whose dependencies should be resolved through the `gatsby` package
-        PnpWebpackPlugin.bind(directoryPath(`.cache`), module), PnpWebpackPlugin.bind(directoryPath(`public`), module), // Transparently resolve packages via PnP when needed; noop otherwise
+        PnpWebpackPlugin.bind(process.env.GATSBY_CACHE_DIR || directoryPath(`.cache`), module), PnpWebpackPlugin.bind(process.env.GATSBY_BUILD_DIR || directoryPath(`public`), module), // Transparently resolve packages via PnP when needed; noop otherwise
         PnpWebpackPlugin]
       };
     }
diff --git a/node_modules/gatsby/dist/utils/worker.js b/node_modules/gatsby/dist/utils/worker.js
index 542d07b..2d7cf58 100644
--- a/node_modules/gatsby/dist/utils/worker.js
+++ b/node_modules/gatsby/dist/utils/worker.js
@@ -17,7 +17,7 @@ const generatePathToOutput = outputPath => {
     outputFileName = path.join(outputFileName, `index.html`);
   }
 
-  return path.join(process.cwd(), `public`, outputFileName);
+  return path.join(process.env.GATSBY_BUILD_DIR || path.join(process.cwd(), 'public'), outputFileName);
 };
 
 function renderHTML({
@@ -28,6 +28,11 @@ function renderHTML({
   // This is being executed in child process, so we need to set some vars
   // for modules that aren't bundled by webpack.
   envVars.forEach(([key, value]) => process.env[key] = value);
+
+  // if process.env.NODE_PATH is set, you need to update the directories
+  // node is looking for to match the parent.
+  require(`module`).Module._initPaths()
+
   return Promise.map(paths, path => new Promise((resolve, reject) => {
     const htmlComponentRenderer = require(htmlComponentRendererPath);
 
