// Generated by Lona Compiler 0.6.0

import AppKit
import Foundation

// MARK: - TemplateBrowser

public class TemplateBrowser: NSBox {

  // MARK: Lifecycle

  public init(_ parameters: Parameters) {
    self.parameters = parameters

    super.init(frame: .zero)

    setUpViews()
    setUpConstraints()

    update()
  }

  public convenience init() {
    self.init(Parameters())
  }

  public required init?(coder aDecoder: NSCoder) {
    self.parameters = Parameters()

    super.init(coder: aDecoder)

    setUpViews()
    setUpConstraints()

    update()
  }

  // MARK: Public

  public var onSelectTokens: (() -> Void)? {
    get { return parameters.onSelectTokens }
    set { parameters.onSelectTokens = newValue }
  }

  public var onSelectThemedTokens: (() -> Void)? {
    get { return parameters.onSelectThemedTokens }
    set { parameters.onSelectThemedTokens = newValue }
  }

  public var onClickDone: (() -> Void)? {
    get { return parameters.onClickDone }
    set { parameters.onClickDone = newValue }
  }

  public var onClickCancel: (() -> Void)? {
    get { return parameters.onClickCancel }
    set { parameters.onClickCancel = newValue }
  }

  public var parameters: Parameters {
    didSet {
      if parameters != oldValue {
        update()
      }
    }
  }

  // MARK: Private

  private var textView = LNATextField(labelWithString: "")
  private var dividerView = NSBox()
  private var view1View = NSBox()
  private var tokensListTemplateView = WorkspaceTemplateCard()
  private var view2View = NSBox()
  private var themedTokensListTemplateView = WorkspaceTemplateCard()
  private var divider5View = NSBox()
  private var view4View = NSBox()
  private var cancelButtonView = Button()
  private var view5View = NSBox()
  private var doneButtonView = Button()

  private var textViewTextStyle = TextStyles.large

  private func setUpViews() {
    boxType = .custom
    borderType = .noBorder
    contentViewMargins = .zero
    textView.lineBreakMode = .byWordWrapping
    dividerView.boxType = .custom
    dividerView.borderType = .noBorder
    dividerView.contentViewMargins = .zero
    view1View.boxType = .custom
    view1View.borderType = .noBorder
    view1View.contentViewMargins = .zero
    divider5View.boxType = .custom
    divider5View.borderType = .noBorder
    divider5View.contentViewMargins = .zero
    view4View.boxType = .custom
    view4View.borderType = .noBorder
    view4View.contentViewMargins = .zero
    view2View.boxType = .custom
    view2View.borderType = .noBorder
    view2View.contentViewMargins = .zero
    view5View.boxType = .custom
    view5View.borderType = .noBorder
    view5View.contentViewMargins = .zero

    addSubview(textView)
    addSubview(dividerView)
    addSubview(view1View)
    addSubview(divider5View)
    addSubview(view4View)
    view1View.addSubview(tokensListTemplateView)
    view1View.addSubview(view2View)
    view1View.addSubview(themedTokensListTemplateView)
    view4View.addSubview(cancelButtonView)
    view4View.addSubview(view5View)
    view4View.addSubview(doneButtonView)

    fillColor = Colors.white
    textView.attributedStringValue = textViewTextStyle.apply(to: "Choose a workspace template")
    textViewTextStyle = TextStyles.large
    textView.attributedStringValue = textViewTextStyle.apply(to: textView.attributedStringValue)
    dividerView.fillColor = Colors.grey300
    view1View.fillColor = Colors.grey50
    tokensListTemplateView.image = #imageLiteral(resourceName: "tokens-list")
    tokensListTemplateView.descriptionText =
      "Simple lists of tokens (colors, text styles, etc). Great for new design systems."
    tokensListTemplateView.isSelected = true
    tokensListTemplateView.titleText = "Design Tokens"
    themedTokensListTemplateView.image = #imageLiteral(resourceName: "themed-tokens-list")
    themedTokensListTemplateView.descriptionText =
      "For design systems with multiple themes, e.g. a \"light\" and \"dark\" mode."
    themedTokensListTemplateView.titleText = "Themed Design Tokens"
    divider5View.fillColor = Colors.grey300
    cancelButtonView.titleText = "Cancel"
    doneButtonView.titleText = "OK"
  }

  private func setUpConstraints() {
    translatesAutoresizingMaskIntoConstraints = false
    textView.translatesAutoresizingMaskIntoConstraints = false
    dividerView.translatesAutoresizingMaskIntoConstraints = false
    view1View.translatesAutoresizingMaskIntoConstraints = false
    divider5View.translatesAutoresizingMaskIntoConstraints = false
    view4View.translatesAutoresizingMaskIntoConstraints = false
    tokensListTemplateView.translatesAutoresizingMaskIntoConstraints = false
    view2View.translatesAutoresizingMaskIntoConstraints = false
    themedTokensListTemplateView.translatesAutoresizingMaskIntoConstraints = false
    cancelButtonView.translatesAutoresizingMaskIntoConstraints = false
    view5View.translatesAutoresizingMaskIntoConstraints = false
    doneButtonView.translatesAutoresizingMaskIntoConstraints = false

    let textViewTopAnchorConstraint = textView.topAnchor.constraint(equalTo: topAnchor, constant: 18)
    let textViewLeadingAnchorConstraint = textView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 24)
    let textViewTrailingAnchorConstraint = textView.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -24)
    let dividerViewTopAnchorConstraint = dividerView.topAnchor.constraint(equalTo: textView.bottomAnchor, constant: 18)
    let dividerViewLeadingAnchorConstraint = dividerView.leadingAnchor.constraint(equalTo: leadingAnchor)
    let dividerViewTrailingAnchorConstraint = dividerView.trailingAnchor.constraint(equalTo: trailingAnchor)
    let view1ViewTopAnchorConstraint = view1View.topAnchor.constraint(equalTo: dividerView.bottomAnchor)
    let view1ViewLeadingAnchorConstraint = view1View.leadingAnchor.constraint(equalTo: leadingAnchor)
    let view1ViewTrailingAnchorConstraint = view1View.trailingAnchor.constraint(equalTo: trailingAnchor)
    let divider5ViewTopAnchorConstraint = divider5View.topAnchor.constraint(equalTo: view1View.bottomAnchor)
    let divider5ViewLeadingAnchorConstraint = divider5View.leadingAnchor.constraint(equalTo: leadingAnchor)
    let divider5ViewTrailingAnchorConstraint = divider5View.trailingAnchor.constraint(equalTo: trailingAnchor)
    let view4ViewBottomAnchorConstraint = view4View.bottomAnchor.constraint(equalTo: bottomAnchor)
    let view4ViewTopAnchorConstraint = view4View.topAnchor.constraint(equalTo: divider5View.bottomAnchor)
    let view4ViewLeadingAnchorConstraint = view4View.leadingAnchor.constraint(equalTo: leadingAnchor)
    let view4ViewTrailingAnchorConstraint = view4View.trailingAnchor.constraint(equalTo: trailingAnchor)
    let dividerViewHeightAnchorConstraint = dividerView.heightAnchor.constraint(equalToConstant: 1)
    let tokensListTemplateViewHeightAnchorParentConstraint = tokensListTemplateView
      .heightAnchor
      .constraint(lessThanOrEqualTo: view1View.heightAnchor, constant: -32)
    let view2ViewHeightAnchorParentConstraint = view2View
      .heightAnchor
      .constraint(lessThanOrEqualTo: view1View.heightAnchor, constant: -32)
    let themedTokensListTemplateViewHeightAnchorParentConstraint = themedTokensListTemplateView
      .heightAnchor
      .constraint(lessThanOrEqualTo: view1View.heightAnchor, constant: -32)
    let tokensListTemplateViewLeadingAnchorConstraint = tokensListTemplateView
      .leadingAnchor
      .constraint(equalTo: view1View.leadingAnchor, constant: 16)
    let tokensListTemplateViewTopAnchorConstraint = tokensListTemplateView
      .topAnchor
      .constraint(equalTo: view1View.topAnchor, constant: 16)
    let tokensListTemplateViewBottomAnchorConstraint = tokensListTemplateView
      .bottomAnchor
      .constraint(equalTo: view1View.bottomAnchor, constant: -16)
    let view2ViewLeadingAnchorConstraint = view2View
      .leadingAnchor
      .constraint(equalTo: tokensListTemplateView.trailingAnchor)
    let view2ViewTopAnchorConstraint = view2View.topAnchor.constraint(equalTo: view1View.topAnchor, constant: 16)
    let view2ViewBottomAnchorConstraint = view2View
      .bottomAnchor
      .constraint(equalTo: view1View.bottomAnchor, constant: -16)
    let themedTokensListTemplateViewLeadingAnchorConstraint = themedTokensListTemplateView
      .leadingAnchor
      .constraint(equalTo: view2View.trailingAnchor)
    let themedTokensListTemplateViewTopAnchorConstraint = themedTokensListTemplateView
      .topAnchor
      .constraint(equalTo: view1View.topAnchor, constant: 16)
    let themedTokensListTemplateViewBottomAnchorConstraint = themedTokensListTemplateView
      .bottomAnchor
      .constraint(equalTo: view1View.bottomAnchor, constant: -16)
    let divider5ViewHeightAnchorConstraint = divider5View.heightAnchor.constraint(equalToConstant: 1)
    let cancelButtonViewHeightAnchorParentConstraint = cancelButtonView
      .heightAnchor
      .constraint(lessThanOrEqualTo: view4View.heightAnchor, constant: -24)
    let view5ViewHeightAnchorParentConstraint = view5View
      .heightAnchor
      .constraint(lessThanOrEqualTo: view4View.heightAnchor, constant: -24)
    let doneButtonViewHeightAnchorParentConstraint = doneButtonView
      .heightAnchor
      .constraint(lessThanOrEqualTo: view4View.heightAnchor, constant: -24)
    let cancelButtonViewLeadingAnchorConstraint = cancelButtonView
      .leadingAnchor
      .constraint(equalTo: view4View.leadingAnchor, constant: 24)
    let cancelButtonViewTopAnchorConstraint = cancelButtonView
      .topAnchor
      .constraint(equalTo: view4View.topAnchor, constant: 12)
    let cancelButtonViewBottomAnchorConstraint = cancelButtonView
      .bottomAnchor
      .constraint(equalTo: view4View.bottomAnchor, constant: -12)
    let view5ViewLeadingAnchorConstraint = view5View.leadingAnchor.constraint(equalTo: cancelButtonView.trailingAnchor)
    let view5ViewTopAnchorConstraint = view5View.topAnchor.constraint(equalTo: view4View.topAnchor, constant: 12)
    let view5ViewBottomAnchorConstraint = view5View
      .bottomAnchor
      .constraint(equalTo: view4View.bottomAnchor, constant: -12)
    let doneButtonViewTrailingAnchorConstraint = doneButtonView
      .trailingAnchor
      .constraint(equalTo: view4View.trailingAnchor, constant: -24)
    let doneButtonViewLeadingAnchorConstraint = doneButtonView
      .leadingAnchor
      .constraint(equalTo: view5View.trailingAnchor)
    let doneButtonViewTopAnchorConstraint = doneButtonView
      .topAnchor
      .constraint(equalTo: view4View.topAnchor, constant: 12)
    let doneButtonViewBottomAnchorConstraint = doneButtonView
      .bottomAnchor
      .constraint(equalTo: view4View.bottomAnchor, constant: -12)
    let tokensListTemplateViewWidthAnchorConstraint = tokensListTemplateView
      .widthAnchor
      .constraint(equalToConstant: 220)
    let view2ViewWidthAnchorConstraint = view2View.widthAnchor.constraint(equalToConstant: 8)
    let themedTokensListTemplateViewWidthAnchorConstraint = themedTokensListTemplateView
      .widthAnchor
      .constraint(equalToConstant: 220)

    tokensListTemplateViewHeightAnchorParentConstraint.priority = NSLayoutConstraint.Priority.defaultLow
    view2ViewHeightAnchorParentConstraint.priority = NSLayoutConstraint.Priority.defaultLow
    themedTokensListTemplateViewHeightAnchorParentConstraint.priority = NSLayoutConstraint.Priority.defaultLow
    cancelButtonViewHeightAnchorParentConstraint.priority = NSLayoutConstraint.Priority.defaultLow
    view5ViewHeightAnchorParentConstraint.priority = NSLayoutConstraint.Priority.defaultLow
    doneButtonViewHeightAnchorParentConstraint.priority = NSLayoutConstraint.Priority.defaultLow

    NSLayoutConstraint.activate([
      textViewTopAnchorConstraint,
      textViewLeadingAnchorConstraint,
      textViewTrailingAnchorConstraint,
      dividerViewTopAnchorConstraint,
      dividerViewLeadingAnchorConstraint,
      dividerViewTrailingAnchorConstraint,
      view1ViewTopAnchorConstraint,
      view1ViewLeadingAnchorConstraint,
      view1ViewTrailingAnchorConstraint,
      divider5ViewTopAnchorConstraint,
      divider5ViewLeadingAnchorConstraint,
      divider5ViewTrailingAnchorConstraint,
      view4ViewBottomAnchorConstraint,
      view4ViewTopAnchorConstraint,
      view4ViewLeadingAnchorConstraint,
      view4ViewTrailingAnchorConstraint,
      dividerViewHeightAnchorConstraint,
      tokensListTemplateViewHeightAnchorParentConstraint,
      view2ViewHeightAnchorParentConstraint,
      themedTokensListTemplateViewHeightAnchorParentConstraint,
      tokensListTemplateViewLeadingAnchorConstraint,
      tokensListTemplateViewTopAnchorConstraint,
      tokensListTemplateViewBottomAnchorConstraint,
      view2ViewLeadingAnchorConstraint,
      view2ViewTopAnchorConstraint,
      view2ViewBottomAnchorConstraint,
      themedTokensListTemplateViewLeadingAnchorConstraint,
      themedTokensListTemplateViewTopAnchorConstraint,
      themedTokensListTemplateViewBottomAnchorConstraint,
      divider5ViewHeightAnchorConstraint,
      cancelButtonViewHeightAnchorParentConstraint,
      view5ViewHeightAnchorParentConstraint,
      doneButtonViewHeightAnchorParentConstraint,
      cancelButtonViewLeadingAnchorConstraint,
      cancelButtonViewTopAnchorConstraint,
      cancelButtonViewBottomAnchorConstraint,
      view5ViewLeadingAnchorConstraint,
      view5ViewTopAnchorConstraint,
      view5ViewBottomAnchorConstraint,
      doneButtonViewTrailingAnchorConstraint,
      doneButtonViewLeadingAnchorConstraint,
      doneButtonViewTopAnchorConstraint,
      doneButtonViewBottomAnchorConstraint,
      tokensListTemplateViewWidthAnchorConstraint,
      view2ViewWidthAnchorConstraint,
      themedTokensListTemplateViewWidthAnchorConstraint
    ])
  }

  private func update() {
    tokensListTemplateView.onPressCard = handleOnSelectTokens
    themedTokensListTemplateView.onPressCard = handleOnSelectThemedTokens
    doneButtonView.onClick = handleOnClickDone
    cancelButtonView.onClick = handleOnClickCancel
  }

  private func handleOnSelectTokens() {
    onSelectTokens?()
  }

  private func handleOnSelectThemedTokens() {
    onSelectThemedTokens?()
  }

  private func handleOnClickDone() {
    onClickDone?()
  }

  private func handleOnClickCancel() {
    onClickCancel?()
  }
}

// MARK: - Parameters

extension TemplateBrowser {
  public struct Parameters: Equatable {
    public var onSelectTokens: (() -> Void)?
    public var onSelectThemedTokens: (() -> Void)?
    public var onClickDone: (() -> Void)?
    public var onClickCancel: (() -> Void)?

    public init(
      onSelectTokens: (() -> Void)? = nil,
      onSelectThemedTokens: (() -> Void)? = nil,
      onClickDone: (() -> Void)? = nil,
      onClickCancel: (() -> Void)? = nil)
    {
      self.onSelectTokens = onSelectTokens
      self.onSelectThemedTokens = onSelectThemedTokens
      self.onClickDone = onClickDone
      self.onClickCancel = onClickCancel
    }

    public static func ==(lhs: Parameters, rhs: Parameters) -> Bool {
      return true
    }
  }
}

// MARK: - Model

extension TemplateBrowser {
  public struct Model: LonaViewModel, Equatable {
    public var id: String?
    public var parameters: Parameters
    public var type: String {
      return "TemplateBrowser"
    }

    public init(id: String? = nil, parameters: Parameters) {
      self.id = id
      self.parameters = parameters
    }

    public init(_ parameters: Parameters) {
      self.parameters = parameters
    }

    public init(
      onSelectTokens: (() -> Void)? = nil,
      onSelectThemedTokens: (() -> Void)? = nil,
      onClickDone: (() -> Void)? = nil,
      onClickCancel: (() -> Void)? = nil)
    {
      self
        .init(
          Parameters(
            onSelectTokens: onSelectTokens,
            onSelectThemedTokens: onSelectThemedTokens,
            onClickDone: onClickDone,
            onClickCancel: onClickCancel))
    }
  }
}
